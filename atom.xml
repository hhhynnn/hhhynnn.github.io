<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zenith</title>
  
  <subtitle>HYN</subtitle>
  <link href="http://www.hyinan.com/atom.xml" rel="self"/>
  
  <link href="http://www.hyinan.com/"/>
  <updated>2023-04-02T08:16:31.411Z</updated>
  <id>http://www.hyinan.com/</id>
  
  <author>
    <name>Zenith</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>B站直播间发送弹幕</title>
    <link href="http://www.hyinan.com/2023/04/02/python/B%E7%AB%99%E7%9B%B4%E6%92%AD%E9%97%B4%E5%8F%91%E9%80%81%E5%BC%B9%E5%B9%95/"/>
    <id>http://www.hyinan.com/2023/04/02/python/B%E7%AB%99%E7%9B%B4%E6%92%AD%E9%97%B4%E5%8F%91%E9%80%81%E5%BC%B9%E5%B9%95/</id>
    <published>2023-04-02T08:16:03.000Z</published>
    <updated>2023-04-02T08:16:31.411Z</updated>
    
    <content type="html"><![CDATA[<p>利用 requests 实现自动发送B站弹幕</p><span id="more"></span><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>需要用到 requests 库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install requests<br></code></pre></td></tr></table></figure><h4 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h4><p>获取到发送弹幕所需要的 cookie 和 roomid 就能直接写脚本自动发送弹幕了，下面给出发送一条弹幕的方法。</p><h5 id="获取发送弹幕的-cookie"><a href="#获取发送弹幕的-cookie" class="headerlink" title="获取发送弹幕的 cookie"></a>获取发送弹幕的 cookie</h5><p>随便找个B站直播间发送一条弹幕，用 F12 控制台找到 send 包，复制 Payload 里面的 cookie</p class='item-img' data-src='/2023/04/02/python/B%E7%AB%99%E7%9B%B4%E6%92%AD%E9%97%B4%E5%8F%91%E9%80%81%E5%BC%B9%E5%B9%95/image-20220310093103932.png'><img src="/2023/04/02/python/B%E7%AB%99%E7%9B%B4%E6%92%AD%E9%97%B4%E5%8F%91%E9%80%81%E5%BC%B9%E5%B9%95/image-20220310093103932.png" alt="image-20220310093103932" style="zoom:80%;"><h5 id="获取直播间-room-id"><a href="#获取直播间-room-id" class="headerlink" title="获取直播间 room_id"></a>获取直播间 room_id</h5><p>直播间的URL里面就包含了直播间的 room_id</p class='item-img' data-src='/2023/04/02/python/B%E7%AB%99%E7%9B%B4%E6%92%AD%E9%97%B4%E5%8F%91%E9%80%81%E5%BC%B9%E5%B9%95/image-20220310090228586.png'><img src="/2023/04/02/python/B%E7%AB%99%E7%9B%B4%E6%92%AD%E9%97%B4%E5%8F%91%E9%80%81%E5%BC%B9%E5%B9%95/image-20220310090228586.png" alt="image-20220310090228586" style="zoom:80%;"><p>复制下来即可</p><h5 id="写脚本"><a href="#写脚本" class="headerlink" title="写脚本"></a>写脚本</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_msg</span>(<span class="hljs-params">cookie, room_id, msg</span>):<br>    <span class="hljs-comment"># 从 cookie 中获取 csrf</span><br>    pattern = <span class="hljs-string">r&#x27;bili_jct=(.*?);&#x27;</span><br>    csrf = re.search(pattern, cookie).group(<span class="hljs-number">1</span>)<br>    <br>    <span class="hljs-comment"># 构造 headers 和 data</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;origin&#x27;</span>: <span class="hljs-string">&#x27;https://live.bilibili.com&#x27;</span>,<br>        <span class="hljs-string">&#x27;cookie&#x27;</span>: cookie<br>    &#125;<br>    data = &#123;<br>        <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;16777215&#x27;</span>,<br>        <span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-string">&#x27;25&#x27;</span>,<br>        <span class="hljs-string">&#x27;mode&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>        <span class="hljs-string">&#x27;bubble&#x27;</span>: <span class="hljs-string">&#x27;0&#x27;</span>,<br>        <span class="hljs-string">&#x27;roomid&#x27;</span>: room_id,<br>        <span class="hljs-string">&#x27;csrf&#x27;</span>: csrf,<br>        <span class="hljs-string">&#x27;csrf_token&#x27;</span>: csrf,<br>        <span class="hljs-string">&#x27;msg&#x27;</span>: msg,<br>        <span class="hljs-string">&#x27;rnd&#x27;</span>: <span class="hljs-built_in">int</span>(time.time())<br>    &#125;<br>    <br>    <span class="hljs-comment"># 发送弹幕</span><br>    url = <span class="hljs-string">&#x27;https://api.live.bilibili.com/msg/send&#x27;</span><br>    response = requests.post(url=url, data=data, headers=headers)<br>    <span class="hljs-keyword">return</span> response<br><br><span class="hljs-comment"># 调用函数发送弹幕</span><br>cookie = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 第一步获得的 cookie</span><br>room_id = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 直播间的 room_id</span><br>msg = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 要发送的弹幕</span><br>send_msg(cookie, room_id, msg)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用 requests 实现自动发送B站弹幕&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://www.hyinan.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>requests爬虫</title>
    <link href="http://www.hyinan.com/2023/04/02/python/requests%E7%88%AC%E8%99%AB/"/>
    <id>http://www.hyinan.com/2023/04/02/python/requests%E7%88%AC%E8%99%AB/</id>
    <published>2023-04-02T08:10:09.000Z</published>
    <updated>2023-04-02T08:14:52.436Z</updated>
    
    <content type="html"><![CDATA[<p>requests 爬虫参考代码</p><span id="more"></span><h2 id="一、爬取数据"><a href="#一、爬取数据" class="headerlink" title="一、爬取数据"></a>一、爬取数据</h2><p>爬数据就是用 post 和 get 来获取数据，主要包括<strong>打印页面</strong>和用 <strong>xpath 定位</strong>数据两方面操作。</p><h3 id="1-打印页面"><a href="#1-打印页面" class="headerlink" title="1. 打印页面"></a>1. 打印页面</h3><p>调用 get/post 返回值 response 中的 text 方法就能显示页面数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>response = requests.get(url)<br><br><span class="hljs-comment"># 控制台打印</span><br><span class="hljs-built_in">print</span>(response.text)<br><br><span class="hljs-comment"># 输出到文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.html&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(response.text)<br></code></pre></td></tr></table></figure><p>也可以使用 post 方法，附带 data 和 header</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">headers = &#123;...&#125;<br>data = &#123;...&#125;<br>url = <span class="hljs-string">&#x27;...&#x27;</span><br>response = requests.post(url=url, data=data, headers=headers)<br></code></pre></td></tr></table></figure><p><strong>乱码问题</strong></p><p>有时候 response.text 是乱码，很可能是编码问题导致的，修改 response 的编码格式然后再打开即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(response.apparent_encoding) <span class="hljs-comment"># python 推测出的编码格式</span><br><span class="hljs-built_in">print</span>(response.encoding) <span class="hljs-comment"># python 解析数据时使用的编码格式</span><br><br><span class="hljs-comment"># 修改编码格式</span><br><span class="hljs-comment"># 通常 python 推测出来的编码格式是对的</span><br>response.encoding = response.apparent_encoding<br><br><span class="hljs-comment"># 输出到文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.html&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(response.text)<br></code></pre></td></tr></table></figure><h3 id="2-用-xpath-定位数据"><a href="#2-用-xpath-定位数据" class="headerlink" title="2. 用 xpath 定位数据"></a>2. 用 xpath 定位数据</h3><p>可以定位的数据有很多种，比如：①标签；②标签的文本；③标签及其内部的文本；④标签的属性值。</p><p>利用 etree 来使用 xpath</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><br>response = requests.get(url)<br>tree = etree.HTML(response.text)<br>itemlist = tree.xpath(<span class="hljs-string">&#x27;...&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="①-获取标签"><a href="#①-获取标签" class="headerlink" title="① 获取标签"></a>① 获取标签</h4><p>利用标签名、标签的属性值定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 精确定位, 返回值是 list</span><br>itemlist = tree.xpath(<span class="hljs-string">&quot;//div[@id=&#x27;about&#x27;]&quot;</span>)<br><span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> itemlist:<br>    <span class="hljs-built_in">print</span>(each)<br></code></pre></td></tr></table></figure><p>利用 contains 实现模糊定位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 利用值属性值</span><br><span class="hljs-comment"># &lt;div id=&quot;about&quot;&gt;...&lt;/div&gt;</span><br>itemlist = tree.xpath(<span class="hljs-string">&quot;//div[contains(@id,&#x27;about&#x27;)]&quot;</span>) <span class="hljs-comment"># 属性值</span><br><br><span class="hljs-comment"># 利用标签的文本</span><br><span class="hljs-comment"># &lt;a&gt;Zenith&lt;/a&gt;</span><br>itemlist = tree.xpath(<span class="hljs-string">&quot;//a[contains(text(),&#x27;Zenith&#x27;)]&quot;</span>)<br><br><span class="hljs-comment"># 利用标签范围内文本</span><br><span class="hljs-comment"># &lt;div&gt;...&lt;a&gt;Zenith&lt;/a&gt;...&lt;/div&gt;</span><br>itemlist = tree.xpath(<span class="hljs-string">&quot;//div[contains(string(),&#x27;Zenith&#x27;)]&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="②-获取文本"><a href="#②-获取文本" class="headerlink" title="② 获取文本"></a>② 获取文本</h4><p>可以利用 xpath 直接获取文本，也可以用调用元素的方法获取其文本。</p><p>用 xpath 获取文本的方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取标签的文本, 可能会返回空值</span><br><span class="hljs-comment"># &lt;div id=&quot;about&quot;&gt;&lt;/div&gt; 会返回空</span><br>itemlist = tree.xpath(<span class="hljs-string">&quot;//div[@id=&#x27;about&#x27;]/text()&quot;</span>)<br><br><span class="hljs-comment"># 获取各个标签内部的所有文本</span><br>textlist = tree.xpath(<span class="hljs-string">&quot;//div[@id=&#x27;about&#x27;]//text()&quot;</span>)<br></code></pre></td></tr></table></figure><p>用元素的方法获取文本的方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">itemlist = tree.xpath(<span class="hljs-string">&quot;//div[@id=&#x27;about&#x27;]&quot;</span>)<br><span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> itemlist:<br>    <span class="hljs-comment"># 打印标签本身的文本</span><br>    <span class="hljs-built_in">print</span>(each.text) <br>    <span class="hljs-comment"># 打印标签内部的文本</span><br>    <span class="hljs-keyword">for</span> inner <span class="hljs-keyword">in</span> each.xpath(<span class="hljs-string">&quot;.//*&quot;</span>):<br>        <span class="hljs-keyword">if</span> inner.text:<br>            <span class="hljs-built_in">print</span>(inner.text)<br></code></pre></td></tr></table></figure><h4 id="③-获取属性值"><a href="#③-获取属性值" class="headerlink" title="③ 获取属性值"></a>③ 获取属性值</h4><p>用 xpath 直接定位到属性值，操作方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 直接用 xpath 获取属性值</span><br><span class="hljs-comment"># &lt;div id=&quot;about&quot;&gt;&lt;/div&gt;</span><br>itemlist = tree.xpath(<span class="hljs-string">&quot;//div[@id=&#x27;about&#x27;]/@id&quot;</span>)<br><span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> itemlist:<br>    <span class="hljs-built_in">print</span>(each)<br><br><span class="hljs-comment"># 分级进行 xpath 定位</span><br>itemlist = tree.xpath(<span class="hljs-string">&quot;//div[@id=&#x27;about&#x27;]&quot;</span>)<br><span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> itemlist:<br>    vlist = each.xpath(<span class="hljs-string">&quot;./@id&quot;</span>)<br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> vlist:<br>        <span class="hljs-built_in">print</span>(val)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;requests 爬虫参考代码&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://www.hyinan.com/categories/python/"/>
    
    
    <category term="spider" scheme="http://www.hyinan.com/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>scrapy爬虫</title>
    <link href="http://www.hyinan.com/2023/04/02/python/scrapy%E7%88%AC%E8%99%AB/"/>
    <id>http://www.hyinan.com/2023/04/02/python/scrapy%E7%88%AC%E8%99%AB/</id>
    <published>2023-04-02T07:45:50.000Z</published>
    <updated>2023-04-02T08:05:45.658Z</updated>
    
    <content type="html"><![CDATA[<p>几乎不怎么用 scrapy，遇到个爬取百度百科的任务，简单记录一下</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;几乎不怎么用 scrapy，遇到个爬取百度百科的任务，简单记录一下&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="http://www.hyinan.com/categories/python/"/>
    
    
    <category term="spider" scheme="http://www.hyinan.com/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>服务器后台执行python</title>
    <link href="http://www.hyinan.com/2023/04/02/python/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8Cpython/"/>
    <id>http://www.hyinan.com/2023/04/02/python/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8Cpython/</id>
    <published>2023-04-02T06:29:44.000Z</published>
    <updated>2023-04-02T06:29:56.122Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux跑Python脚本的指令，以及相关的控制命令</p><span id="more"></span><h2 id="脚本运行指令"><a href="#脚本运行指令" class="headerlink" title="脚本运行指令"></a>脚本运行指令</h2><p>命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup python -u test.py &gt; test.log 2&gt;&amp;1 &amp;<br></code></pre></td></tr></table></figure><ul><li><p><code>nohup</code>：程序不被挂起</p></li><li><p><code>-u</code>：不启用缓存，实时打印信息到输出文件</p><p>不加-u会导致日志文件不会实时刷新</p></li><li><p><code>&gt;</code>：重定向打印信息</p></li><li><p><code>2&gt;&amp;1</code>：将 stderr 转化为 stdout (0=stdin, 1=stdout, 2=stderr)</p></li><li></li></ul><h2 id="管理后台程序"><a href="#管理后台程序" class="headerlink" title="管理后台程序"></a>管理后台程序</h2><p><strong>查找后台程序的PID</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -ef | grep python<br></code></pre></td></tr></table></figure><p><strong>杀死后台进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">kill -s 9 &lt;pid&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在Linux跑Python脚本的指令，以及相关的控制命令&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>docker desktop 无法启动</title>
    <link href="http://www.hyinan.com/2023/04/02/tips/docker%E8%B8%A9%E5%9D%91/"/>
    <id>http://www.hyinan.com/2023/04/02/tips/docker%E8%B8%A9%E5%9D%91/</id>
    <published>2023-04-02T06:08:57.000Z</published>
    <updated>2023-04-02T06:20:22.450Z</updated>
    
    <content type="html"><![CDATA[<p>docker 一启动就显示“docker desktop stopped”，导致完全无法启动，坑爹</p><span id="more"></span><p>2023.4.1 被同学叫去玩明日方舟，下载了个网易 MUMU 模拟器，稀里糊涂安装完之后，今天 (2023.4.2) 发现 docker 无法启动了。<br>百思不得其解，经反复研究发现：原来是 MUMU 安装的时候关闭了我的 Hyper-V，坑爹。下面是我的解决方法：</p><h3 id="1-打开“启动或关闭-windows-功能”"><a href="#1-打开“启动或关闭-windows-功能”" class="headerlink" title="1.打开“启动或关闭 windows 功能”"></a>1.打开“启动或关闭 windows 功能”</h3><p>可以直接搜索到这项设置，很方便：</p class='item-img' data-src='/2023/04/02/tips/docker%E8%B8%A9%E5%9D%91/image-20230402141443323.png'><img src="/2023/04/02/tips/docker%E8%B8%A9%E5%9D%91/image-20230402141443323.png" alt="image-20230402141443323" style="zoom:80%;"><h3 id="2-开启虚拟机服务"><a href="#2-开启虚拟机服务" class="headerlink" title="2. 开启虚拟机服务"></a>2. 开启虚拟机服务</h3><p>win10 上会有一个 Hyper-V 选项，我是 win11 没找到，但找到了叫“虚拟机平台”的，类似，把他打开</p class='item-img' data-src='/2023/04/02/tips/docker%E8%B8%A9%E5%9D%91/image-20230402141556466.png'><img src="/2023/04/02/tips/docker%E8%B8%A9%E5%9D%91/image-20230402141556466.png" alt="image-20230402141556466" style="zoom:80%;"><h3 id="3-重启电脑"><a href="#3-重启电脑" class="headerlink" title="3. 重启电脑"></a>3. 重启电脑</h3><p>弄完之后他会提示重启电脑，重启之后就好了，docker desktop 就能正常启动了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;docker 一启动就显示“docker desktop stopped”，导致完全无法启动，坑爹&lt;/p&gt;</summary>
    
    
    
    <category term="tips" scheme="http://www.hyinan.com/categories/tips/"/>
    
    
    <category term="docker" scheme="http://www.hyinan.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>hexo写作指南</title>
    <link href="http://www.hyinan.com/2023/04/02/tips/hexo/hexo%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
    <id>http://www.hyinan.com/2023/04/02/tips/hexo/hexo%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/</id>
    <published>2023-04-02T01:32:42.000Z</published>
    <updated>2023-04-02T01:35:00.866Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下插入图片、设置文章的标签和类别等操作。</p><span id="more"></span><h2 id="一、插入图片"><a href="#一、插入图片" class="headerlink" title="一、插入图片"></a>一、插入图片</h2><p>需要用到 <code>hexo-asset-image</code> 这个插件</p><h3 id="1-下载插件"><a href="#1-下载插件" class="headerlink" title="1. 下载插件"></a>1. 下载插件</h3><p>下载命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>修改<code>_config.yml</code>满足，把这一项改为 true =&gt; <code>post_asset_folder: true</code></p class='item-img' data-src='/2023/04/02/tips/hexo/hexo%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/image-20230402091753656.png'><img src="/2023/04/02/tips/hexo/hexo%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/image-20230402091753656.png" alt="image-20230402091753656" style="zoom:80%;"><p>这个组件目前有 bug（记录于 2020.05.27）</p><p>解决方案为将文件<code>node_modules/hexo-asset-image/index.js</code>替换为如下的内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;cheerio&quot;</span>);<br><br><span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPosition</span>(<span class="hljs-params">str, m, i</span>) &#123;<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">split</span>(m, i).<span class="hljs-title function_">join</span>(m).<span class="hljs-property">length</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> version = <span class="hljs-title class_">String</span>(hexo.<span class="hljs-property">version</span>).<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">filter</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&quot;after_post_render&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-keyword">var</span> config = hexo.<span class="hljs-property">config</span>;<br>  <span class="hljs-keyword">if</span> (config.<span class="hljs-property">post_asset_folder</span>) &#123;<br>    <span class="hljs-keyword">var</span> link = data.<span class="hljs-property">permalink</span>;<br>    <span class="hljs-keyword">if</span> (version.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title class_">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)<br>      <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">var</span> beginPos = <span class="hljs-title function_">getPosition</span>(link, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br>    <span class="hljs-keyword">var</span> endPos = link.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;/&quot;</span>) + <span class="hljs-number">1</span>;<br>    link = link.<span class="hljs-title function_">substring</span>(beginPos, endPos);<br><br>    <span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&quot;excerpt&quot;</span>, <span class="hljs-string">&quot;more&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">var</span> key = toprocess[i];<br><br>      <span class="hljs-keyword">var</span> $ = cheerio.<span class="hljs-title function_">load</span>(data[key], &#123;<br>        <span class="hljs-attr">ignoreWhitespace</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">xmlMode</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">lowerCaseTags</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">false</span>,<br>      &#125;);<br><br>      $(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;src&quot;</span>)) &#123;<br>          <span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br>          <span class="hljs-keyword">var</span> src = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;src&quot;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>          <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.<span class="hljs-title function_">test</span>(src) &amp;&amp; !<span class="hljs-regexp">/^\s*\//</span>.<span class="hljs-title function_">test</span>(src)) &#123;<br>            <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br>            <span class="hljs-comment">// In addition, to support multi-level local directory.</span><br>            <span class="hljs-keyword">var</span> linkArray = link.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;/&quot;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">elem</span>) &#123;<br>              <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;);<br>            <span class="hljs-keyword">var</span> srcArray = src.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;/&quot;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">elem</span>) &#123;<br>              <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; elem != <span class="hljs-string">&quot;.&quot;</span>;<br>            &#125;);<br>            <span class="hljs-keyword">if</span> (srcArray.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>) srcArray.<span class="hljs-title function_">shift</span>();<br>            src = srcArray.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;/&quot;</span>);<br>            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;src&quot;</span>, config.<span class="hljs-property">root</span> + link + src);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span> &amp;&amp;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span> + config.<span class="hljs-property">root</span> + link + src);<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-property">info</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>($(<span class="hljs-variable language_">this</span>));<br>        &#125;<br>      &#125;);<br>      data[key] = $.<span class="hljs-title function_">html</span>();<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-图片插入格式"><a href="#2-图片插入格式" class="headerlink" title="2. 图片插入格式"></a>2. 图片插入格式</h3><p>正确插入图片需要满足两个条件：</p><ol><li><p>图片保存在与 .md 同名的文件夹内；</p></li><li><p>使用相对路劲引用图片；</p></li></ol><p class='item-img' data-src='/2023/04/02/tips/hexo/hexo%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/image-20230402092613046.png'><img src="/2023/04/02/tips/hexo/hexo%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/image-20230402092613046.png" alt="image-20230402092613046"></p><p>插入格式有两种：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 第一种 markdown 格式</span><br>![<span class="hljs-string">image-20230402092129468</span>](<span class="hljs-link">./搭建hexo博客/image-1.png</span>)<br><br><span class="hljs-section"># 第二种 html 格式</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./搭建hexo博客/image-1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;image-1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;zoom:80%;&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="二、分类和标签"><a href="#二、分类和标签" class="headerlink" title="二、分类和标签"></a>二、分类和标签</h2><p>参考教程： <a href="https://hexo.io/zh-cn/docs/front-matter">hexo 文档之 front-matter</a></p><h3 id="1-分类-categories"><a href="#1-分类-categories" class="headerlink" title="1. 分类 categories"></a>1. 分类 categories</h3><p>层次分类用 categories，如下面的分类表示本文章属于 Dirary-&gt;Life 类（Dirary 是父类）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span><br></code></pre></td></tr></table></figure><p>一篇文章可以同时处于多个分类模块下，每一个都要用<code>-[]</code>标记</p><p>举例：下面的分类表示文章属于 Diary-&gt;PlayStation，也属于 Diary-&gt;Gage，也属于 Life</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> [<span class="hljs-string">Diary</span>, <span class="hljs-string">PlayStation</span>]<br>  <span class="hljs-bullet">-</span> [<span class="hljs-string">Diary</span>, <span class="hljs-string">Games</span>]<br>  <span class="hljs-bullet">-</span> [<span class="hljs-string">Life</span>]<br></code></pre></td></tr></table></figure><h3 id="2-标签-tags"><a href="#2-标签-tags" class="headerlink" title="2. 标签 tags"></a>2. 标签 tags</h3><p>标签很粗暴，直接连续写下去</p><p>举例：下面的分类表示文章属于 PS3 和 Games</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">PS3</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Games</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下插入图片、设置文章的标签和类别等操作。&lt;/p&gt;</summary>
    
    
    
    <category term="tips" scheme="http://www.hyinan.com/categories/tips/"/>
    
    
    <category term="hexo" scheme="http://www.hyinan.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>latex 使用随记</title>
    <link href="http://www.hyinan.com/2023/04/01/tips/latex/"/>
    <id>http://www.hyinan.com/2023/04/01/tips/latex/</id>
    <published>2023-04-01T02:51:58.000Z</published>
    <updated>2023-04-02T06:22:22.050Z</updated>
    
    <content type="html"><![CDATA[<p>简单记一下 latex 相关的东西，比如环境配置，编译问题等</p><span id="more"></span><h1 id="环境配置问题"><a href="#环境配置问题" class="headerlink" title="环境配置问题"></a>环境配置问题</h1><p>我用的是 texLive, 编译老是出问题, 坑坑</p><h2 id="一、使用模板提示“缺少-sty-文件”"><a href="#一、使用模板提示“缺少-sty-文件”" class="headerlink" title="一、使用模板提示“缺少 .sty 文件”"></a>一、使用模板提示“缺少 .sty 文件”</h2><p>假设你已经有 .sty 文件了，现在的主要问题就是 .sty 文件放在哪里：<br>① 放在 .tex 所在目录下；<br>② 放在 latex 的 .sty 库目录下；</p><p>下面介绍方法 ②</p><p>step1. 输入 <code>kpsewhich --var-value=TEXMFHOME</code>，按回车，得到一个路径,打开这个路径（文件夹）。<br>如果路径中的某一层或几层文件夹不存在，就创建它们</p><p>step2. 最后会位于 texmf 文件夹。 在 texmf 中创建 tex 文件夹，在 tex 文件夹中创建 latex 文件夹。<br>（把现在的路径记为 <code>TEXMFHOME/tex/latex</code>）</p class='item-img' data-src='/2023/04/01/tips/latex/image-20220323102926972.png'><img src="/2023/04/01/tips/latex/image-20220323102926972.png" alt="image-20220323102926972" style="zoom: 67%;"><p>step3. 在 latex 文件夹下创建一个与 .sty 同名的文件夹，然后把 .sty 放进新建的这个文件夹里</p><p>如上图所示，我的 <code>picins.sty</code> 就存放在 <code>picins</code> 文件夹内</p><p>目前已经下载的包：</p><ol><li><p>nexus.sty, 下载地址<a href="https://www.latexstudio.net/archives/8591.html">一个漂亮的LaTeX模板设计</a></p></li><li><p>easyphys.sty, 下载地址 <a href="https://www.latexstudio.net/index/details/index/mid/2314.html">Elegentbook魔改版</a></p></li></ol><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>我用的是 texlive，简单记一下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看某个 .sty 是否存在</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">kpsewhich &lt;package-name&gt;.sty</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看所有的已安装包</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tlmgr list --only-installed</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看 texlive 版本</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">latex -v</span><br><br></code></pre></td></tr></table></figure><h1 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h1><h2 id="一、公式"><a href="#一、公式" class="headerlink" title="一、公式"></a>一、公式</h2><p>强推一个网站，可以识别手写符号：<a href="http://detexify.kirelabs.org/classify.html">Detexify LaTeX handwritten symbol recognition (kirelabs.org)</a></p><h3 id="1-不同的公式编辑"><a href="#1-不同的公式编辑" class="headerlink" title="1. 不同的公式编辑"></a>1. 不同的公式编辑</h3><p>公式分为行内公式和行间公式，下面分别进行说明</p><h4 id="①-行内公式"><a href="#①-行内公式" class="headerlink" title="① 行内公式"></a>① 行内公式</h4><p>行内公式统一使用<code>$...$</code>来表达. <code>$</code>前后一般要有空格, 除非公式后面有标点符号</p><h4 id="②-行间公式"><a href="#②-行间公式" class="headerlink" title="② 行间公式"></a>② 行间公式</h4><p>对于行间公式, 要么编号, 要么不编号; 要么单行, 要么多行. 通过组合之后可知行间公式有四种: 单行编号、单行不编号、多行编号和多行不编号. 下面对每种公式的写法逐一介绍.</p><h5 id="单行编号"><a href="#单行编号" class="headerlink" title="单行编号"></a>单行编号</h5><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;equation&#125;<span class="hljs-keyword">\label</span>&#123;...&#125;<br><span class="hljs-keyword">\int</span><span class="hljs-built_in">_</span>0<span class="hljs-built_in">^</span>1f(t)dt = <span class="hljs-keyword">\iint</span><span class="hljs-built_in">_</span>Dg(x,y)dxdy.<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br></code></pre></td></tr></table></figure><h5 id="单行不编号"><a href="#单行不编号" class="headerlink" title="单行不编号"></a>单行不编号</h5><p>不编号公式应避免使用 <code>$$...$$</code>, 因为它可能会产生不良间距. 可以用</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\[</span><br><span class="hljs-keyword">\int</span><span class="hljs-built_in">_</span>0<span class="hljs-built_in">^</span>1f(t)dt = <span class="hljs-keyword">\iint</span><span class="hljs-built_in">_</span>Dg(x,y)dxdy.<br><span class="hljs-keyword">\]</span><br></code></pre></td></tr></table></figure><p>也可以这样写</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;equation*&#125;<br><span class="hljs-keyword">\int</span><span class="hljs-built_in">_</span>0<span class="hljs-built_in">^</span>1f(t)dt = <span class="hljs-keyword">\iint</span><span class="hljs-built_in">_</span>Dg(x,y)dxdy.<br><span class="hljs-keyword">\end</span>&#123;equation*&#125;<br></code></pre></td></tr></table></figure><h5 id="多行编号"><a href="#多行编号" class="headerlink" title="多行编号"></a>多行编号</h5><p>多行用 <code>&amp;</code> 对齐，公式如下</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;equation&#125;<span class="hljs-keyword">\label</span>&#123;...&#125;<br><span class="hljs-keyword">\begin</span>&#123;split&#125;<br><span class="hljs-keyword">\frac</span>&#123;1&#125;&#123;2&#125; (<span class="hljs-keyword">\sin</span>(x+y) + <span class="hljs-keyword">\sin</span>(x-y)) =<span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\frac</span>&#123;1&#125;&#123;2&#125;(<span class="hljs-keyword">\sin</span> x <span class="hljs-keyword">\cos</span> y + <span class="hljs-keyword">\cos</span> x <span class="hljs-keyword">\sin</span> y)<span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> + <span class="hljs-keyword">\frac</span>&#123;1&#125;&#123;2&#125; (<span class="hljs-keyword">\sin</span> x <span class="hljs-keyword">\cos</span> y - <span class="hljs-keyword">\cos</span> x <span class="hljs-keyword">\sin</span> y)<span class="hljs-keyword">\\</span><br>=<span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\sin</span> x <span class="hljs-keyword">\cos</span> y.<br><span class="hljs-keyword">\end</span>&#123;split&#125;<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br></code></pre></td></tr></table></figure><p>另一个例子</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;equation&#125;<span class="hljs-keyword">\label</span>&#123;...&#125;<br><span class="hljs-keyword">\begin</span>&#123;dcases&#125;<br><span class="hljs-keyword">\frac</span>&#123;dS&#125;&#123;dt&#125; = <span class="hljs-keyword">\Lambda</span> - <span class="hljs-keyword">\beta</span> SI - <span class="hljs-keyword">\mu</span> S -<span class="hljs-keyword">\mu</span><span class="hljs-built_in">_</span>1 mZS + <span class="hljs-keyword">\delta</span><span class="hljs-built_in">_</span>0R, <span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\frac</span>&#123;dI&#125;&#123;dt&#125; = <span class="hljs-keyword">\beta</span> SI - (<span class="hljs-keyword">\mu</span>+<span class="hljs-keyword">\delta</span>+<span class="hljs-keyword">\gamma</span>)I.<br><span class="hljs-keyword">\end</span>&#123;dcases&#125;<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br></code></pre></td></tr></table></figure><h5 id="多行不编号"><a href="#多行不编号" class="headerlink" title="多行不编号"></a>多行不编号</h5><p>例子如下</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;align*&#125;<br><span class="hljs-keyword">\frac</span>&#123;1&#125;&#123;2&#125; (<span class="hljs-keyword">\sin</span>(x+y) + <span class="hljs-keyword">\sin</span>(x-y)) =<span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\frac</span>&#123;1&#125;&#123;2&#125;(<span class="hljs-keyword">\sin</span> x <span class="hljs-keyword">\cos</span> y + <span class="hljs-keyword">\cos</span> x <span class="hljs-keyword">\sin</span> y)<span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span> + <span class="hljs-keyword">\frac</span>&#123;1&#125;&#123;2&#125; (<span class="hljs-keyword">\sin</span> x <span class="hljs-keyword">\cos</span> y - <span class="hljs-keyword">\cos</span> x <span class="hljs-keyword">\sin</span> y)<span class="hljs-keyword">\\</span><br>=<span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\sin</span> x <span class="hljs-keyword">\cos</span> y.<br><span class="hljs-keyword">\end</span>&#123;align*&#125;<br></code></pre></td></tr></table></figure><h2 id="二、引用"><a href="#二、引用" class="headerlink" title="二、引用"></a>二、引用</h2><p>包括图片、公式和参考文献的引用。（todo）</p><h2 id="三、表格"><a href="#三、表格" class="headerlink" title="三、表格"></a>三、表格</h2><p>表格可以进行合并操作，但语法有点点复杂，而且并不是所见即所得，还是比较考研操作。</p><p>此外列表的语法也记录在这里</p><h4 id="①-表格"><a href="#①-表格" class="headerlink" title="① 表格"></a>① 表格</h4><p>这里是表格相关的语法。（todo）</p><h4 id="②-列表"><a href="#②-列表" class="headerlink" title="② 列表"></a>② 列表</h4><p>下面记录一下 latex 相关的排版</p><h5 id="封面横线排版"><a href="#封面横线排版" class="headerlink" title="封面横线排版"></a>封面横线排版</h5><p>使用了下面这种写法</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;spacing&#125;&#123;2.5&#125;<br>    <span class="hljs-keyword">\begin</span>&#123;center&#125;<br>        &#123;<span class="hljs-keyword">\zihao</span>&#123;-3&#125; <span class="hljs-keyword">\textbf</span>&#123;学<span class="hljs-keyword">\quad</span><span class="hljs-keyword">\quad</span> 院&#125; <br>        <span class="hljs-keyword">\underline</span>&#123;<span class="hljs-keyword">\makebox</span>[17em][c]&#123;<span class="hljs-keyword">\zihao</span>&#123;-3&#125;<span class="hljs-keyword">\kaishu</span> xxxxxx&#125;&#125;&#125; <span class="hljs-keyword">\par</span><br>        &#123;<span class="hljs-keyword">\zihao</span>&#123;-3&#125; <span class="hljs-keyword">\textbf</span>&#123;专<span class="hljs-keyword">\quad</span><span class="hljs-keyword">\quad</span> 业&#125; <br>        <span class="hljs-keyword">\underline</span>&#123;<span class="hljs-keyword">\makebox</span>[17em][c]&#123;<span class="hljs-keyword">\zihao</span>&#123;-3&#125;<span class="hljs-keyword">\kaishu</span> xxxxxxxxxx&#125;&#125;&#125; <span class="hljs-keyword">\par</span><br>        &#123;<span class="hljs-keyword">\zihao</span>&#123;-3&#125; <span class="hljs-keyword">\textbf</span>&#123;学生姓名&#125; <br>        <span class="hljs-keyword">\underline</span>&#123;<span class="hljs-keyword">\makebox</span>[17em][c]&#123;<span class="hljs-keyword">\zihao</span>&#123;-3&#125;<span class="hljs-keyword">\kaishu</span> xxx&#125;&#125;&#125; <span class="hljs-keyword">\par</span><br>        &#123;<span class="hljs-keyword">\zihao</span>&#123;-3&#125; <span class="hljs-keyword">\textbf</span>&#123;学生学号&#125; <br>        <span class="hljs-keyword">\underline</span>&#123;<span class="hljs-keyword">\makebox</span>[17em][c]&#123;<span class="hljs-keyword">\zihao</span>&#123;-3&#125;<span class="hljs-keyword">\kaishu</span> xxxxxxxxxx&#125;&#125;&#125; <span class="hljs-keyword">\par</span><br>        &#123;<span class="hljs-keyword">\zihao</span>&#123;-3&#125; <span class="hljs-keyword">\textbf</span>&#123;指导老师&#125; <br>        <span class="hljs-keyword">\underline</span>&#123;<span class="hljs-keyword">\makebox</span>[17em][c]&#123;<span class="hljs-keyword">\zihao</span>&#123;-3&#125;<span class="hljs-keyword">\kaishu</span> xxx&#125;&#125;&#125; <span class="hljs-keyword">\par</span><br>        &#123;<span class="hljs-keyword">\zihao</span>&#123;-3&#125; <span class="hljs-keyword">\textbf</span>&#123;提交时间&#125; <br>        <span class="hljs-keyword">\underline</span>&#123;<span class="hljs-keyword">\makebox</span>[17em][c]&#123;<span class="hljs-keyword">\zihao</span>&#123;-3&#125;<span class="hljs-keyword">\kaishu</span> 2023年4月1日&#125;&#125;&#125; <span class="hljs-keyword">\par</span><br>    <span class="hljs-keyword">\end</span>&#123;center&#125;<br><span class="hljs-keyword">\end</span>&#123;spacing&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单记一下 latex 相关的东西，比如环境配置，编译问题等&lt;/p&gt;</summary>
    
    
    
    <category term="tips" scheme="http://www.hyinan.com/categories/tips/"/>
    
    
    <category term="latex" scheme="http://www.hyinan.com/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>搭建hexo博客</title>
    <link href="http://www.hyinan.com/2023/03/31/tips/hexo/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.hyinan.com/2023/03/31/tips/hexo/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-03-31T14:12:57.000Z</published>
    <updated>2023-04-02T08:04:26.961Z</updated>
    
    <content type="html"><![CDATA[<p>个人配置 hexo 的记录，参考了 B 站的教程。</p><span id="more"></span><p>参考教程：<a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=17488073384275823610">手把手教你从 0 开始搭建自己的个人博客 |无坑版视频教程| hexo</a></p><h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello, world"></a>Hello, world</h1><p>先让博客跑起来：下载 hexo，使用默认主题在本地运行</p><h2 id="一、-hexo-环境配置"><a href="#一、-hexo-环境配置" class="headerlink" title="一、 hexo 环境配置"></a>一、 hexo 环境配置</h2><p>hexo 要用到 node.js，先安装 node.js </p><h3 id="1-安装-node-js"><a href="#1-安装-node-js" class="headerlink" title="1. 安装 node.js"></a>1. 安装 node.js</h3><p>windows 下自己找个教程安装 nodejs</p><p>下载地址：<a href="https://nodejs.org/zh-cn/">node.js 官方下载</a></p><p>安装说明：<a href="https://www.cnblogs.com/tanghaorong/p/14652357.html">nodeJS 的安装与配置</a></p><h3 id="2-安装-hexo"><a href="#2-安装-hexo" class="headerlink" title="2. 安装 hexo"></a>2. 安装 hexo</h3><p>敲命令安装 hexo，这个命令在 hexo 官网上有介绍，具体可以查看<a href="https://hexo.io/zh-cn/">hexo 官网</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p><code>npm install -g hexo-cli</code> 是在命令行中使用 npm（Node Package Manager）来全局安装 Hexo 博客生成器的命令。</p><p>具体来说，<code>npm install</code> 是安装 npm 包的命令，<code>-g</code> 表示全局安装，<code>hexo-cli</code> 是要安装的包名。在安装 hexo-cli 包后，你可以在任何地方使用命令行输入 <code>hexo</code> 命令，使用 Hexo 博客生成器的相关功能，例如创建新文章、生成静态页面等。</p><p>需要注意的是，使用 <code>npm install -g</code> 安装的包是全局可用的，而非针对某个项目的本地安装。因此，在安装时需要以管理员权限运行命令，以确保权限足够。此外，如果你在使用 Hexo 时遇到了问题，可以尝试使用 <code>npm uninstall -g hexo-cli</code> 命令卸载全局安装的 Hexo，并重新安装本地版本。</p><h2 id="二、创建本地博客"><a href="#二、创建本地博客" class="headerlink" title="二、创建本地博客"></a>二、创建本地博客</h2><p>用最少的步骤让 hexo 博客运行起来，下面进行介绍</p><h3 id="1-初始化一个-hexo-目录"><a href="#1-初始化一个-hexo-目录" class="headerlink" title="1. 初始化一个 hexo 目录"></a>1. 初始化一个 hexo 目录</h3><p>下面这个命令会创建一个新的目录 ZenithBlog，其中包括 Hexo 博客生成器的基本目录结构和默认配置文件。在这个目录下，你可以通过编辑 Markdown 文件来撰写博客文章，并通过 Hexo 提供的命令来生成静态网站文件和发布到服务器等操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$  hexo init ZenithBlog<br></code></pre></td></tr></table></figure><p>PS.执行这个命令前需要保证系统已经安装了 Node.js 和 npm</p><h3 id="2-在目录中安装必要组件"><a href="#2-在目录中安装必要组件" class="headerlink" title="2. 在目录中安装必要组件"></a>2. 在目录中安装必要组件</h3><p>进入<code>ZenithBlog</code>目录执行 <code>npm install</code> 命令，这会在当前项目目录中查找 <code>package.json</code> 文件，并根据其中列出的依赖包列表安装所需的包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> ZenithBlog<br>$  npm install<br></code></pre></td></tr></table></figure><h3 id="3-启动-hexo"><a href="#3-启动-hexo" class="headerlink" title="3. 启动 hexo"></a>3. 启动 hexo</h3><p>在本地启动 hexo 服务，下面这个命令会启动 Hexo 博客的本地服务，并将博客站点的预览地址设为 <code>http://localhost:44944</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s -p 44944<br></code></pre></td></tr></table></figure><p>在启动本地服务器后，可以在浏览器中输入 <code>http://localhost:44944</code> 来访问博客站点的本地预览。</p><h2 id="三-把博客部署到-github"><a href="#三-把博客部署到-github" class="headerlink" title="三. 把博客部署到 github"></a>三. 把博客部署到 github</h2><p>先配置好 git 环境，然后就能把博客部署到服务器了</p><h3 id="1-配置-git-环境"><a href="#1-配置-git-环境" class="headerlink" title="1. 配置 git 环境"></a>1. 配置 git 环境</h3><p>分“下载git”，“配置 name 和 email 信息”，“免密连接 git”和“部署hexo”几个部分描述。</p><h4 id="①-下载-git"><a href="#①-下载-git" class="headerlink" title="① 下载 git"></a>① 下载 git</h4><p>网上有关 git 下载的教程很多，这里列一个：<a href="https://www.itheima.com/news/20211208/163755.html">Git安装教程：git工具安装详细步骤 (itheima.com)</a></p><h4 id="②-设置账户信息"><a href="#②-设置账户信息" class="headerlink" title="② 设置账户信息"></a>② 设置账户信息</h4><p>安装完 git 后需要先创建个名字和 email 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>$ git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span><br><br><span class="hljs-comment"># 查看已有的配置</span><br>git config --list<br>git config --global --list<br></code></pre></td></tr></table></figure><h4 id="③-github-保存本地的-id-rsa-pub"><a href="#③-github-保存本地的-id-rsa-pub" class="headerlink" title="③ github 保存本地的 id_rsa.pub"></a>③ github 保存本地的 id_rsa.pub</h4><p><code>id_rsa.pub</code> 文件保存在 <code>~/.ssh</code> 目录下，如果没有的话用下面的命令创建一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下面的 email 和 前面的 user.email 要匹配</span><br>$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;email@example.com</span><br></code></pre></td></tr></table></figure><p>此时<code>./ssh</code>中会生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，其中<code>id_rsa</code>是私钥，<code>id_rsa.pub</code>是公钥</p><p>需要把 <code>id_rsa.pub</code> 的内容上传到 github 的 sshKey 里，具体操作参考 github 官方教程：<a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">新增 SSH 密钥到 GitHub 帐户 - GitHub 文档</a></p><h4 id="④-创建-github-项目"><a href="#④-创建-github-项目" class="headerlink" title="④ 创建 github 项目"></a>④ 创建 github 项目</h4><p>项目名称和 github 名称有关系，我的 github 用户名是 hhhynnn，则需要创建一个名为 <code>hhhynnn.github.io</code> 的项目，注意项目必须公开(public)，其他名字不行，会报错。</p><h4 id="⑤-更换-hexo-部署方式"><a href="#⑤-更换-hexo-部署方式" class="headerlink" title="⑤ 更换 hexo 部署方式"></a>⑤ 更换 hexo 部署方式</h4><p>分两步走，第一步是下载部署所需插件，第二步是修改 <code>_config.yml</code> 文件，定义部署方式</p><h5 id="step1-下载-hexo-deployer-git"><a href="#step1-下载-hexo-deployer-git" class="headerlink" title="step1. 下载 hexo-deployer-git"></a>step1. 下载 hexo-deployer-git</h5><p>这个组件非常重要，利用 git 来部署专用，不论是部署到 github 还是部署到阿里云都需要。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h5 id="step2-修改在ZenithBlog-config-yml"><a href="#step2-修改在ZenithBlog-config-yml" class="headerlink" title="step2. 修改在ZenithBlog/_config.yml"></a>step2. 修改在<code>ZenithBlog/_config.yml</code></h5><p>注意把下面的 repo 改成自己的 github 仓库地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:hhhynnn/hhhynnn.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h5 id="step3-设置-gitignore"><a href="#step3-设置-gitignore" class="headerlink" title="step3. 设置 .gitignore"></a><del>step3. 设置 .gitignore</del></h5><p><del>把博客代码 push 到 github 的时候不要包含 /public 目录<br>(2023.4.2 我怀疑不需要这一步)</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># .gitignore 内容<br>public<br></code></pre></td></tr></table></figure><h5 id="step4-push-项目"><a href="#step4-push-项目" class="headerlink" title="step4. push 项目"></a>step4. push 项目</h5><p><del>把 hexo 项目 Push 到 github 上, 注意 push 的分支，本地是 master 就填 master</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">2023.4.2 回顾: 不需要这一步，不用 Push 代码</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行了反而无法查看结果</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add remote origin git@github.com:hhhynnn/hhhynnn.github.io.git</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push -u origin master</span><br></code></pre></td></tr></table></figure><p>部署 hexo 到 github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g -d<br></code></pre></td></tr></table></figure><h5 id="step5-查看"><a href="#step5-查看" class="headerlink" title="step5. 查看"></a>step5. 查看</h5><p>访问 <code>https://hhhynnn.github.io</code> 就能查看自己的博客，其中 <code>hhhynnn</code> 需要改成自己的 github 用户名</p><p>另外 github 比较慢，要稍等一会儿才能看到部署效果</p><h4 id="③-git-配置代理的方法"><a href="#③-git-配置代理的方法" class="headerlink" title="③ git 配置代理的方法"></a>③ git 配置代理的方法</h4><p>我的代理端口是 10808，协议是 socks5，用下面的方法配置代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global http.proxy socks5://127.0.0.1:10808<br>$ git config --global https.proxy socks5://127.0.0.1:10808<br></code></pre></td></tr></table></figure><p>将来想要取消代理可以输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>$ git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure><p>想要查看 git 的 config 配置信息可以输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --system --list<br>$ git config --global  --list<br>$ git config --<span class="hljs-built_in">local</span>  --list<br></code></pre></td></tr></table></figure><h1 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h1><p>主题资源地址： <a href="https://hexo.io/themes/">Themes</a>，东西很多，随便找，每个主题的 github 页面下都会介绍怎么配置主题，很简单。</p><p>下面简单介绍如何配置主题 <a href="https://github.com/tufu9441/maupassant-hexo">maupassant-hexo</a></p><p>先下载主题到<code>ZenithBlog/themes/maupassant</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> git@github.com:tufu9441/maupassant-hexo.git ./themes/maupassant<br></code></pre></td></tr></table></figure><p>按照主题作者的要求，下载必须要组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-renderer-pug --save<br>$ npm install hexo-renderer-sass --save<br></code></pre></td></tr></table></figure><p>修改<code>ZenithBlog/_config.yml</code>文件的<code>theme</code>值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">maupassant</span><br></code></pre></td></tr></table></figure><p>清除原文件（非必需），重新生成文件，部署到远端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;个人配置 hexo 的记录，参考了 B 站的教程。&lt;/p&gt;</summary>
    
    
    
    <category term="tips" scheme="http://www.hyinan.com/categories/tips/"/>
    
    
    <category term="hexo" scheme="http://www.hyinan.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo部署到服务器</title>
    <link href="http://www.hyinan.com/2023/03/31/tips/hexo/hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.hyinan.com/2023/03/31/tips/hexo/hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2023-03-31T14:03:50.000Z</published>
    <updated>2023-04-02T01:29:56.420Z</updated>
    
    <content type="html"><![CDATA[<p>这个部署过程还挺坑，记录一下方面自己复刻, 主要是配置服务器的 nginx 和 git</p><span id="more"></span><h3 id="1-服务器配置"><a href="#1-服务器配置" class="headerlink" title="(1) 服务器配置"></a>(1) 服务器配置</h3><p>主要分为 git 远程连接配置，git hook 文件配置，nginx 主页配置这三步</p><p>参考教程：<a href="https://xie.infoq.cn/article/8fe4fa3098aaf70bc38749847">在自己的服务器上部署 hexo 博客</a></p><p>配置服务器的第一步是设置无密码登陆，即在服务器上修改 <code>~/.ssh/authorized_keys</code>文件，把客户端的<code>~/ssh/id_rsa.pub</code>复制到里面，即可实现直接 ssh 链接，不需要密码验证（github 的 ssh 连接原理也是如此）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim ~/.ssh/authorized_keys</span><br>---<br>(把自己电脑的 id_rsa.pub 数据复制到文件里)<br>---<br></code></pre></td></tr></table></figure><h4 id="1-配置服务器-nginx-服务"><a href="#1-配置服务器-nginx-服务" class="headerlink" title="1 配置服务器 nginx 服务"></a>1 配置服务器 nginx 服务</h4><p>重装过一遍服务器系统，ssh 登陆不上了</p><p>解决办法是本地 .ssh 文件夹内的 kowns_hosts 删除服务器相关项目</p><h5 id="1-卸载已存在的-nginx"><a href="#1-卸载已存在的-nginx" class="headerlink" title="1. 卸载已存在的 nginx"></a>1. 卸载已存在的 nginx</h5><p>如果已存在 nginx 可以考虑卸载了。。。方便跟教程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查找 nginx 相关文件</span><br>whereis nginx | tr &#x27; &#x27; &#x27;\n&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除上述文件/文件夹</span><br>rm -rf  xxxx/nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除 nginx</span><br>apt-get remove nginx*<br><br></code></pre></td></tr></table></figure><h5 id="2-下载-nginx"><a href="#2-下载-nginx" class="headerlink" title="2. 下载 nginx"></a>2. 下载 nginx</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入安装目录</span><br>cd /usr/local/src/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载</span><br>wget http://nginx.org/download/nginx-1.22.0.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span><br>tar -xvf nginx-1.22.0.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重命名</span><br>mv  nginx-1.10.2  nginx<br><br></code></pre></td></tr></table></figure><h5 id="3-编译-nginx"><a href="#3-编译-nginx" class="headerlink" title="3. 编译 nginx"></a>3. 编译 nginx</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入目录并编译安装</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> nginx</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装编译必须的包</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">apt-get install libpcre3 libpcre3-dev</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">./configure</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make install</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置 ngxin 的快捷执行</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">alias</span> nginx=/usr/local/nginx/sbin/nginx</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过修改环境变量的方式也可以让 nginx 快捷执行（没必要, <span class="hljs-built_in">alias</span> 够了）</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim ~/.bashrc</span><br>---<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加这一句话</span><br>export PATH=$PATH:/usr/local/nginx/sbin/<br>---<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">source</span> ~/.bashrc</span><br></code></pre></td></tr></table></figure><h5 id="4-设置服务器主页文件夹"><a href="#4-设置服务器主页文件夹" class="headerlink" title="4. 设置服务器主页文件夹"></a>4. 设置服务器主页文件夹</h5><p>方法是修改<code>nginx.conf</code> 文件，如下步骤</p><p><strong>找到 conf 文件</strong></p><p>下面看到了两个 nginx.conf，我们选择 nginx 文件夹下存在 sbin 文件夹的那个路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">find / -name nginx.conf</span><br>----<br>/usr/local/nginx/conf/nginx.conf<br>/usr/local/src/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><p><strong>修改 conf 文件</strong></p><p>特别注意：<code> /root/blog/public</code> 这个路径是将来服务器主页的地址，后面配置 git 的 hook 函数时也要用到这个地址！！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim /usr/local/nginx/conf/nginx.conf</span><br>---<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加 user root;</span><br>user root;<br>...<br>http&#123;<br>  ...<br>  server &#123;<br>    location / &#123;<br>      # 修改为 root /root/blog/public; 后面我们的服务器主页就设置在这个文件夹下<br>      root /root/blog/public;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-运行-nginx"><a href="#5-运行-nginx" class="headerlink" title="5. 运行 nginx"></a>5. 运行 nginx</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看 80 端口占用并 <span class="hljs-built_in">kill</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">netstat -lnp | grep 80</span><br>-----<br>tcp6       0      0 :::80                   :::*                    LISTEN      42464/apache2<br>-----<br><span class="hljs-meta prompt_"># </span><span class="language-bash">强制杀死进程 42464，这个数字在上面的输出中有出现</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">kill</span> -9 42464</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">apache2 的占用比较特殊，需要手动关闭</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">service apache2 stop</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动 nginx</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nginx</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看端口占用, nginx 主页是 80 端口</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">lsof -i:80</span><br><br></code></pre></td></tr></table></figure><h5 id="6-重启-ngxinx"><a href="#6-重启-ngxinx" class="headerlink" title="6. 重启 ngxinx"></a>6. 重启 ngxinx</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">重启</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nginx -s reload</span><br></code></pre></td></tr></table></figure><h4 id="2-配置-git-仓库"><a href="#2-配置-git-仓库" class="headerlink" title="2 配置 git 仓库"></a>2 配置 git 仓库</h4><p><strong>安装 git</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">apt-get updata</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">apt-get upgrade</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">apt-get install git-all</span><br></code></pre></td></tr></table></figure><p><strong>新建 git 仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建空仓库</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /root/blog/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git init --bare zenithBlog.git</span><br></code></pre></td></tr></table></figure><p><strong>添加 hook 用文件</strong></p><p>特别注意，配置 git 的 hook时，要用到配置 nginx 时定义的服务器主页地址 <code> /root/blog/public</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新建 post-receive 文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim ./zenithBlog.git/hooks/post-receive</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">写 hook 文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--work-tree 是 nginx.conf 中定义的服务器主页地址</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--git-dir 是 hexo-deploy 的目标文件夹，也就是你刚刚创建的那个</span><br>-----<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>git --work-tree=/root/blog/public --git-dir=/root/blog/zenithBlog.git checkout -f<br>-----<br></code></pre></td></tr></table></figure><p><strong>修改 post-receive 为可执行</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x ./zenithBlog.git/hooks/post-receive</span><br></code></pre></td></tr></table></figure><h3 id="（2）本地配置"><a href="#（2）本地配置" class="headerlink" title="（2）本地配置"></a>（2）本地配置</h3><p>本地配置只有一个，修改<code>_config.yml</code>，定义博客的部署方式，注意把下面的 ip 地址改成服务器地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ./zenithBlog/_config.yml</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">root@xxx.xxx.xxx.xxx:/root/blog/zenithBlog.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>安装 git 部署工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">./zenithBlog/</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">npm install hexo-deployer-git --save</span><br></code></pre></td></tr></table></figure><h2 id="（3）-部署"><a href="#（3）-部署" class="headerlink" title="（3） 部署"></a>（3） 部署</h2><p>本地执行部署命令即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">部署到 hexo</span><br>hexo g -d<br></code></pre></td></tr></table></figure><h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><p>踩了不少坑，记录一下</p><h2 id="一、nginx-已安装，但文件混乱"><a href="#一、nginx-已安装，但文件混乱" class="headerlink" title="一、nginx 已安装，但文件混乱"></a>一、nginx 已安装，但文件混乱</h2><p>强烈建议重装 nginx，下面是我硬着头皮没重装，进行的尝试：</p><p>网上说直接配置 nginx.conf, 使用  <code>find / -name nginx.conf</code> 命令可以找到这个文件</p><p>但我的 nginx 是系统自带的，这个配置文件里没有关于 80 端口的配置</p><p>不过在配置文件里看到了一句话 <code>include /etc/nginx/modules-enables/*.conf</code>，指出了其他配置文件目录也存在配置文件，几经转折，终于找到了有关 80 端口的配置，在 <code>/etc/nginx/sites-available/default</code> 这个文件内</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这文件的名字甚至都不是 nginx.conf，是真的坑爹</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">vim /etc/nginx/sites-available/default</span><br>------<br>user root;<br>...<br>server &#123;<br>    # 这两项用于定位， 一定是监听 80 端口的 server<br>    listen 80 default_server;<br>    listen [::]:80 default_server;<br><br>    # 主页文件的 usr, dir<br>    root /var/www/zenith;<br><br>    index index.html index.htm index.nginx-debian.html;<br>    server_name hyinan.com;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、文章部分渲染失败"><a href="#二、文章部分渲染失败" class="headerlink" title="二、文章部分渲染失败"></a>二、文章部分渲染失败</h2><p>使用 <code>hyinan.com</code> 访问博客会渲染失败，<code>www.hyinan.com</code> 就能成功，逆天</p><p>没找到解决办法，估计和阿里云那里的域名解析有关系，以后就用 <code>www.hyinan.com</code> 访问好了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个部署过程还挺坑，记录一下方面自己复刻, 主要是配置服务器的 nginx 和 git&lt;/p&gt;</summary>
    
    
    
    <category term="tips" scheme="http://www.hyinan.com/categories/tips/"/>
    
    
    <category term="hexo" scheme="http://www.hyinan.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo语法</title>
    <link href="http://www.hyinan.com/2023/03/31/tips/hexo/hexo%E8%AF%AD%E6%B3%95/"/>
    <id>http://www.hyinan.com/2023/03/31/tips/hexo/hexo%E8%AF%AD%E6%B3%95/</id>
    <published>2023-03-31T14:00:25.000Z</published>
    <updated>2023-04-01T15:32:11.718Z</updated>
    
    <content type="html"><![CDATA[<p>不常使用 hexo，干脆把 hexo 常用命令直接写进博客里，方便自己看 </p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建博客</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo new post --path tips/hexo/hexo语法 <span class="hljs-string">&quot;hexo语法&quot;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">本地调试, 发布到 44944 端口</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo s -p 44944</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">发布到服务器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo g -d</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这个命令也是发布到服务器</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm run deploy</span><br></code></pre></td></tr></table></figure><p>删除博客只需要直接删除本地文件, 然后 clean</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo clean</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo g</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;不常使用 hexo，干脆把 hexo 常用命令直接写进博客里，方便自己看 &lt;/p&gt;</summary>
    
    
    
    <category term="tips" scheme="http://www.hyinan.com/categories/tips/"/>
    
    
    <category term="hexo" scheme="http://www.hyinan.com/tags/hexo/"/>
    
  </entry>
  
</feed>
